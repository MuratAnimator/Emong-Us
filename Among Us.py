import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext,
)
import random
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
games = {}

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –º–∏–Ω–∏-–∏–≥—Ä–∞ –≤ —Å—Ç–∏–ª–µ Among Us.\n"
        "–°–æ–∑–¥–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/newgame - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "/join [ID] - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\n"
        "/startgame - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É (–µ—Å–ª–∏ —Ç—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å)"
    )

async def new_game(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    game_id = str(random.randint(1000, 9999))
    
    games[game_id] = {
        "creator": chat_id,
        "players": {chat_id: "Not assigned"},
        "status": "waiting"
    }
    
    await update.message.reply_text(
        f"üéÆ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: {game_id}\n"
        f"–î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ /join {game_id}\n"
        f"–ö–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤—ã, —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É /startgame"
    )

async def join_game(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ ID –∏–≥—Ä—ã: /join [ID]")
        return
    
    game_id = context.args[0]
    if game_id not in games:
        await update.message.reply_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.")
        return
    
    if games[game_id]["status"] != "waiting":
        await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!")
        return
    
    games[game_id]["players"][chat_id] = "Not assigned"
    await update.message.reply_text(f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ {game_id}! –û–∂–∏–¥–∞–µ–º –Ω–∞—á–∞–ª–∞...")

async def start_game(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    game_id = None
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª—å
    for gid, game in games.items():
        if game["creator"] == chat_id and game["status"] == "waiting":
            game_id = gid
            break
    
    if not game_id:
        await update.message.reply_text("–í—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –∏–≥—Ä—É –∏–ª–∏ –æ–Ω–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å.")
        return
    
    players = list(games[game_id]["players"].keys())
    if len(players) < 2:
        await update.message.reply_text("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!")
        return
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏ (1 –∏–º–ø–æ—Å—Ç–µ—Ä, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - crewmates)
    impostor = random.choice(players)
    for player in players:
        role = "Impostor" if player == impostor else "Crewmate"
        games[game_id]["players"][player] = role
        await context.bot.send_message(
            chat_id=player,
            text=f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å: **{role}**\n\n"
                 f"üîπ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n"
                 f"Impostor –¥–æ–ª–∂–µ–Ω —É–±–∏–≤–∞—Ç—å, Crewmates - –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è."
        )
    
    games[game_id]["status"] = "started"
    await update.message.reply_text("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –†–æ–ª–∏ —Ä–æ–∑–¥–∞–Ω—ã.")

async def button_click(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data}")

def main() -> None:
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –≤—Ä—É—á–Ω—É—é (–≤–∞–∂–Ω–æ –¥–ª—è Pydroid 3)
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    application = Application.builder().token("8142036620:AAHUxG7N5lGFalkNJ_efiOQqGxl__SN9tO8").build()  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("newgame", new_game))
    application.add_handler(CommandHandler("join", join_game))
    application.add_handler(CommandHandler("startgame", start_game))
    application.add_handler(CallbackQueryHandler(button_click))

    application.run_polling()

if __name__ == "__main__":
    main()